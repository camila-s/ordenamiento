#include<stdio.h>
#include<stdlib.h>
#include <time.h>
#include "Ordenamientos.h"


int ti, tf;

void CargarVector(int cant,int v[369000]);
void menu(int &Opc);





main(){
	int v[369000],Opc,cant, nromax,nromin =0,m;
	
	srand(time(NULL));
	printf("\n\t\t\t\t\t\t\t ***************    BIENVENIDOS     ***************\n\n");
	printf("\n\t\t\t\t --> Por favor, indique la cantidad de elementos que tendra el vector  a cargarse automaticamente: ");
	scanf("%d",&cant);
	printf("\n");
	system("cls");
	

		
    CargarVector(cant, v);
	
    do{
	    system("cls");
		menu(Opc);
	    system("cls");
	
	switch(Opc){
		
		case 1:
		burbuja(v, cant);
		printf("\n VECTOR ORDENADO: ");
        printf("\n");
	    for(int i=0;i<cant;i++){
		printf("\t %d ",v[i]);
	}
	    printf("\n\n\n");
	    system("PAUSE");
	        break;
	        
	    case 2:
		Insercion(v,cant);
		printf("\n VECTOR ORDENADO: ");
        printf("\n");
	    for(int i=0;i<cant;i++){	
		printf("\t %d ",v[i]);
	}
	    printf("\n\n\n");
	    system("PAUSE");
	    	break;
	        
	    case 3:
	    nromax = cant;
		seleccion(v,nromax);
		printf("\n VECTOR ORDENADO: ");
        printf("\n");
	    for(int i=0;i<cant;i++){	
		printf("\t %d ,",v[i]);
	}
	    printf("\n\n\n");
	    system("PAUSE");
	        break;
	        
	    case 4:
	    nromax = cant;
		miquicksort(v,nromin,nromax-1);
		printf("\n VECTOR ORDENADO: ");
        printf("\n");
	    for(int i=0;i<cant;i++){	
		printf("\t %d ,",v[i]);
	}
	    printf("\n\n\n");
	    system("PAUSE");
	        break;
	        
	    case 5:
	    nromax = cant;
		mergeSort(v,nromin,nromax-1);
	    for(int i=0;i<cant;i++){	
		printf("\t %d ,",v[i]);
	}
	    printf("\n\n\n");
	    system("PAUSE");
	        break;
	    case 6: system("cls");
	    printf("\n\n\n");
	    system("PAUSE");
	    break;
	        
	    default:
                printf("LA OPCION ELEGIDA ES INVALIDA.");
                printf("Por favor, seleccione una opciÃ³n dentro de las proporcionadas.");
		}
		
	system("cls");
	printf("\n\n Transcurrieron: %d segundos\n", tf-ti);
	printf("\n\n\n");
	system("PAUSE");

 
}
 while(Opc!=6);
    
	system("cls");
    
     printf("\n\n\n");

}





void CargarVector(int cant, int v[]){
	int c=0;
	
	while(c<cant){
		v[c]=1+ rand()%3600;
		c++;
	}	
}












void menu(int &Opc)
{
	
	system("cls");
	ti = time(NULL);
	printf("\n\n\n");  
	
	printf("\n\t\t\t\t\t\t\t**********************************************************");
	printf("\n\t\t\t\t\t\t\t*********************MENU PRINCIPAL***********************\n");
	printf("\t\t\t\t\t\t\t**********************************************************\n");	
	printf("\t\t\t\t\t\t\t**\tElija el metodo de ordenamiento a utilizar:     **\n");
	printf("\t\t\t\t\t\t\t**                                                      **\n");
	printf("\t\t\t\t\t\t\t**\t1. Metodo burbuja mejorado                      **\n");
	printf("\t\t\t\t\t\t\t**\t2. Insercion                                    **\n");
	printf("\t\t\t\t\t\t\t**\t3. Seleccion                                    **\n");
	printf("\t\t\t\t\t\t\t**\t4. Quicksort                                    **\n");
	printf("\t\t\t\t\t\t\t**\t5. Mergesort                                    **\n");
	printf("\t\t\t\t\t\t\t**********************************************************\n");
	printf("\n\t\t\t\t\t\t\t *Opcion: ");
	scanf("%d", &Opc);
	tf = time(NULL);
		
	system("cls");

}


